Strumenti Software: Comunicazione
Teams
Outlook

Strumenti Software: Codifica
VSCode
Python 3.12.10
Hetzner?
Telegraph
InfluxDB
Grafana
Draw.io


Parte Logger:
BEST PRACTICE = BP

BP: 1 singolo handler per ogni logger, seguendo lo stile di eredita
Altri appunti su come funzionano i logger nel file python di studio dei logger

Scelta architetturale del sistema LAYERED: è la piu comune nei sistemi ETL (Extract-Transform-Load)
Separazione netta: parsing (layer 1), raccolta (layer 2), publish (layer 3), analisi (layer 4 – MQTT)

Scelta architetturale del logger Pipeline: 	I log vengono trasformati e passati sequenzialmente da un modulo all'altro

Pattern strutturali
Adapter nei parser (CowrieParser, AuditdParser, NetcatParser): Uniformano diversi formati di log (raw string, JSON, ecc.) a una struttura comune (dict)
Factory pattern per i parser: c'è bisogno di un modo per istanziare dinamicamente il parser giusto, in base alla sorgente del log
Adapter perché i formati di log variano, ma il sistema vuole lavorare su un’unica struttura. Composite ti semplifica la gestione modulare di tanti parser.


Pattern comportamentali
Strategy per ILogParser e IDataDispatcher: 	Consente di cambiare dinamicamente il parser o il dispatcher senza modificare il LogCollector
Strategy per mantenere il codice aperto all'estensione, chiuso alla modifica (principio SOLID)

Observer implicito con MQTT: Si basa su sottoscrizione/pubblicazione tra componenti (Grafana/Telegraph sono “osservatori” dei topic)

Pattern creazionali
Singleton per LogManager: Assicura che tutto il sistema usi un’unica istanza del logger configurato correttamente
Factory Method in LogManager.get_instance(): Incaricato di costruire e restituire l’oggetto Logger
Singleton + Factory è la combinazione classica per la gestione del logging centralizzato.


Parte Honeypot:

Le regole delle porte vanno dall'alto verso il basso.
Creato l'account su Hetzner per vedere le macchine su cui lavorare e i firewall delle macchine su cui mettere mano
Hetzner -> Hetzner Cloud -> Progetto Honeypot -> Firewalls
Lavorando da remoto è stato necessario aggiungere il mio IP di casa agli IP permessi su Hetzner per accedere alle macchine

Comando per collegarsi alla macchina 
ssh UTENTE@IP_DELLA_MACCHINA -p PORTA

Comando per installare i pacchetti necessari di python
pip install -r requirements.txt

necessita ovviamente di un file requirements nella cartella del progetto sul quale si lavora

Per sviluppare il codice in locale è necessario un ambiente vm di python, creato tramite
python -m venv venv

e accesso poi tramite
venv\Scripts\activate (su Windows)

si esce dall'ambiente vm python con
deactivate


Parte logger:

| Campo       | Significato                                                             | Utile per analisi attacchi? | Perché                                                                                        |
| ----------- | ----------------------------------------------------------------------- | --------------------------- | --------------------------------------------------------------------------------------------- |
| `timestamp` | Data e ora dell’evento                                                  | ✅ Sì                        | Serve a ricostruire la sequenza temporale degli attacchi.                                     |
| `src_ip`    | IP di origine dell’attaccante                                           | ✅ Sì                        | Permette di identificare l’origine dell’attacco. Può essere correlato a IP già noti malevoli. |
| `src_port`  | Porta sorgente dell’attaccante                                          | ⚠️ A volte                  | Utile per capire se l’attaccante usa porte specifiche o casuali.                              |
| `dst_ip`    | IP del server honeypot (disabilitato nel tuo esempio)                   | ❌ No                        | È sempre il tuo honeypot, poco informativo per l'analisi.                                     |
| `dst_port`  | Porta a cui è arrivata la connessione                                   | ✅ Sì                        | Ti dice quale servizio è stato attaccato (es. 22 SSH, 23 Telnet).                             |
| `event`     | Tipo di evento (es. `login.failed`, `command.input`, `session.connect`) | ✅ Sì                        | Cruciale per classificare l’attività dell’attaccante.                                         |
| `message`   | Messaggio descrittivo dell’evento                                       | ✅ Sì                        | Utile per analisi umana e logging testuale.                                                   |
| `username`  | Username usato nel tentativo di login                                   | ✅ Sì                        | Serve per vedere attacchi a dizionario o pattern nei nomi.                                    |
| `password`  | Password usata nel tentativo di login                                   | ✅ Sì                        | Come sopra, utile per blacklist e pattern.                                                    |
| `command`   | Comando inserito dall’attaccante (se ha avuto accesso alla shell)       | ✅ Sì                        | Fondamentale per vedere cosa l’attaccante vuole fare nel sistema.                             |
| `session`   | ID univoco della sessione                                               | ✅ Sì                        | Permette di correlare più eventi della stessa connessione.                                    |
| `protocol`  | Protocollo usato (es. `ssh`, `telnet`)                                  | ✅ Sì                        | Serve per distinguere tipi di attacchi e vettori.                                             |
| `raw`       | Log originale grezzo                                                    | ⚠️ Utile per debugging      | Può servire per ricostruzioni o debugging, ma non è essenziale in analisi automatica.         |


Perché non usare logger nella factory?
La factory (o qualunque libreria/modulo riutilizzabile) non dovrebbe sapere nulla del logging.

Il suo unico compito è creare oggetti o fallire, lasciando la gestione dell'errore al chiamante.

In questo modo il codice rimane modulare e riutilizzabile anche in contesti dove magari non vuoi loggare nulla.

Servira creare un honeypot per ciascuno

SETUP AMBIENTE VIRTUALE PER STACK TIG E MQTT

Seguito l'acquisto di un server su hetzner con Kevin

Fatto il primo accesso su root con la password ottenuta da hetzner e cambiata la password

Creati gli user sudoer personali e non sudoer admin

impostato le iptables ? non sono piu impostate, da controllare

installato influxdb e influxdb-client
installato telegraf
installato grafana-server

attivati tutti e tre in maniera tale che all'avvio del server si avviino anche loro con i comandi
sudo systemctl enable "servizio"

NON ANDAVA BENE QUINDI SONO STATI POI RIMOSSI

installato git
installato docker
installato docker-compose

effettuato il pull della repo contenente il tig stack gia containerizzato

fatto il primo accesso su grafana e cambiata la password iniziale
tramite il link server_ip/:3000

installato mqtt

Installato i servizi apache, cowrie, openldap e dionaea e aperte le loro varie porte sul sistema honeypot.
Installati tramite container docker per...(sicurezza? facilita di gestione? facilita di installazione?)